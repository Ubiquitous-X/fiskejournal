services:

  db:
    build:
      context: ./backend
      dockerfile: Dockerfile-postgres
    container_name: database
    ports:
     - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--locale=sv_SE.UTF-8"
      TZ: Europe/Stockholm
    env_file:
      - .env

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile-backend
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@db:5432/${DATABASE_NAME}
      - DJANGO_ENVIRONMENT=development
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    env_file:
      - .env
    depends_on:
      - db
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend-dev
    container_name: frontend
    volumes:
      - ./frontend:/app
    restart: always
    ports:
      - "3000:3000"
    env_file:
      - .env
    command: npm run dev -- --host

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile-backend
    container_name: celery
    command: celery -A core worker --concurrency=1 --loglevel=info
    depends_on:
      - backend
      - redis
    volumes:
      - ./backend:/app
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    env_file:
      - .env
    restart: on-failure

volumes:
  postgres_data:
  redis_data:
